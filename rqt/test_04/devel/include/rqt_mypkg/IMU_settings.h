// Generated by gencpp from file rqt_mypkg/IMU_settings.msg
// DO NOT EDIT!


#ifndef RQT_MYPKG_MESSAGE_IMU_SETTINGS_H
#define RQT_MYPKG_MESSAGE_IMU_SETTINGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rqt_mypkg
{
template <class ContainerAllocator>
struct IMU_settings_
{
  typedef IMU_settings_<ContainerAllocator> Type;

  IMU_settings_()
    : KP(0.0)
    , KI(0.0)  {
    }
  IMU_settings_(const ContainerAllocator& _alloc)
    : KP(0.0)
    , KI(0.0)  {
  (void)_alloc;
    }



   typedef double _KP_type;
  _KP_type KP;

   typedef double _KI_type;
  _KI_type KI;





  typedef boost::shared_ptr< ::rqt_mypkg::IMU_settings_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rqt_mypkg::IMU_settings_<ContainerAllocator> const> ConstPtr;

}; // struct IMU_settings_

typedef ::rqt_mypkg::IMU_settings_<std::allocator<void> > IMU_settings;

typedef boost::shared_ptr< ::rqt_mypkg::IMU_settings > IMU_settingsPtr;
typedef boost::shared_ptr< ::rqt_mypkg::IMU_settings const> IMU_settingsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rqt_mypkg::IMU_settings_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rqt_mypkg::IMU_settings_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rqt_mypkg::IMU_settings_<ContainerAllocator1> & lhs, const ::rqt_mypkg::IMU_settings_<ContainerAllocator2> & rhs)
{
  return lhs.KP == rhs.KP &&
    lhs.KI == rhs.KI;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rqt_mypkg::IMU_settings_<ContainerAllocator1> & lhs, const ::rqt_mypkg::IMU_settings_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rqt_mypkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rqt_mypkg::IMU_settings_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rqt_mypkg::IMU_settings_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rqt_mypkg::IMU_settings_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rqt_mypkg::IMU_settings_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rqt_mypkg::IMU_settings_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rqt_mypkg::IMU_settings_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rqt_mypkg::IMU_settings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb3456d77fcd813e0b5edd9a6c8556d2";
  }

  static const char* value(const ::rqt_mypkg::IMU_settings_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb3456d77fcd813eULL;
  static const uint64_t static_value2 = 0x0b5edd9a6c8556d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::rqt_mypkg::IMU_settings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rqt_mypkg/IMU_settings";
  }

  static const char* value(const ::rqt_mypkg::IMU_settings_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rqt_mypkg::IMU_settings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 KP\n"
"float64 KI\n"
;
  }

  static const char* value(const ::rqt_mypkg::IMU_settings_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rqt_mypkg::IMU_settings_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.KP);
      stream.next(m.KI);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IMU_settings_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rqt_mypkg::IMU_settings_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rqt_mypkg::IMU_settings_<ContainerAllocator>& v)
  {
    s << indent << "KP: ";
    Printer<double>::stream(s, indent + "  ", v.KP);
    s << indent << "KI: ";
    Printer<double>::stream(s, indent + "  ", v.KI);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RQT_MYPKG_MESSAGE_IMU_SETTINGS_H
