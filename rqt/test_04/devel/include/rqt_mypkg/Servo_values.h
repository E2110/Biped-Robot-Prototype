// Generated by gencpp from file rqt_mypkg/Servo_values.msg
// DO NOT EDIT!


#ifndef RQT_MYPKG_MESSAGE_SERVO_VALUES_H
#define RQT_MYPKG_MESSAGE_SERVO_VALUES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rqt_mypkg
{
template <class ContainerAllocator>
struct Servo_values_
{
  typedef Servo_values_<ContainerAllocator> Type;

  Servo_values_()
    : Servo1_state(0)
    , Servo2_state(0)  {
    }
  Servo_values_(const ContainerAllocator& _alloc)
    : Servo1_state(0)
    , Servo2_state(0)  {
  (void)_alloc;
    }



   typedef int16_t _Servo1_state_type;
  _Servo1_state_type Servo1_state;

   typedef int16_t _Servo2_state_type;
  _Servo2_state_type Servo2_state;





  typedef boost::shared_ptr< ::rqt_mypkg::Servo_values_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rqt_mypkg::Servo_values_<ContainerAllocator> const> ConstPtr;

}; // struct Servo_values_

typedef ::rqt_mypkg::Servo_values_<std::allocator<void> > Servo_values;

typedef boost::shared_ptr< ::rqt_mypkg::Servo_values > Servo_valuesPtr;
typedef boost::shared_ptr< ::rqt_mypkg::Servo_values const> Servo_valuesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rqt_mypkg::Servo_values_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rqt_mypkg::Servo_values_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rqt_mypkg::Servo_values_<ContainerAllocator1> & lhs, const ::rqt_mypkg::Servo_values_<ContainerAllocator2> & rhs)
{
  return lhs.Servo1_state == rhs.Servo1_state &&
    lhs.Servo2_state == rhs.Servo2_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rqt_mypkg::Servo_values_<ContainerAllocator1> & lhs, const ::rqt_mypkg::Servo_values_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rqt_mypkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rqt_mypkg::Servo_values_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rqt_mypkg::Servo_values_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rqt_mypkg::Servo_values_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rqt_mypkg::Servo_values_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rqt_mypkg::Servo_values_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rqt_mypkg::Servo_values_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rqt_mypkg::Servo_values_<ContainerAllocator> >
{
  static const char* value()
  {
    return "204dedd2256b3647ed49ee8ef7c895f5";
  }

  static const char* value(const ::rqt_mypkg::Servo_values_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x204dedd2256b3647ULL;
  static const uint64_t static_value2 = 0xed49ee8ef7c895f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::rqt_mypkg::Servo_values_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rqt_mypkg/Servo_values";
  }

  static const char* value(const ::rqt_mypkg::Servo_values_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rqt_mypkg::Servo_values_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 Servo1_state\n"
"int16 Servo2_state\n"
;
  }

  static const char* value(const ::rqt_mypkg::Servo_values_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rqt_mypkg::Servo_values_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Servo1_state);
      stream.next(m.Servo2_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Servo_values_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rqt_mypkg::Servo_values_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rqt_mypkg::Servo_values_<ContainerAllocator>& v)
  {
    s << indent << "Servo1_state: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Servo1_state);
    s << indent << "Servo2_state: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Servo2_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RQT_MYPKG_MESSAGE_SERVO_VALUES_H
