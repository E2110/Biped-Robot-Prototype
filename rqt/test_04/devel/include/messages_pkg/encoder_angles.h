// Generated by gencpp from file messages_pkg/encoder_angles.msg
// DO NOT EDIT!


#ifndef MESSAGES_PKG_MESSAGE_ENCODER_ANGLES_H
#define MESSAGES_PKG_MESSAGE_ENCODER_ANGLES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace messages_pkg
{
template <class ContainerAllocator>
struct encoder_angles_
{
  typedef encoder_angles_<ContainerAllocator> Type;

  encoder_angles_()
    : leg1_torso_angle(0.0)
    , leg2_torso_angle(0.0)  {
    }
  encoder_angles_(const ContainerAllocator& _alloc)
    : leg1_torso_angle(0.0)
    , leg2_torso_angle(0.0)  {
  (void)_alloc;
    }



   typedef float _leg1_torso_angle_type;
  _leg1_torso_angle_type leg1_torso_angle;

   typedef float _leg2_torso_angle_type;
  _leg2_torso_angle_type leg2_torso_angle;





  typedef boost::shared_ptr< ::messages_pkg::encoder_angles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::messages_pkg::encoder_angles_<ContainerAllocator> const> ConstPtr;

}; // struct encoder_angles_

typedef ::messages_pkg::encoder_angles_<std::allocator<void> > encoder_angles;

typedef boost::shared_ptr< ::messages_pkg::encoder_angles > encoder_anglesPtr;
typedef boost::shared_ptr< ::messages_pkg::encoder_angles const> encoder_anglesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::messages_pkg::encoder_angles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::messages_pkg::encoder_angles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::messages_pkg::encoder_angles_<ContainerAllocator1> & lhs, const ::messages_pkg::encoder_angles_<ContainerAllocator2> & rhs)
{
  return lhs.leg1_torso_angle == rhs.leg1_torso_angle &&
    lhs.leg2_torso_angle == rhs.leg2_torso_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::messages_pkg::encoder_angles_<ContainerAllocator1> & lhs, const ::messages_pkg::encoder_angles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace messages_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::messages_pkg::encoder_angles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::messages_pkg::encoder_angles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::messages_pkg::encoder_angles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::messages_pkg::encoder_angles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::messages_pkg::encoder_angles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::messages_pkg::encoder_angles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::messages_pkg::encoder_angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ffa8eca75cf9acd3fb0aa113a097a2c8";
  }

  static const char* value(const ::messages_pkg::encoder_angles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xffa8eca75cf9acd3ULL;
  static const uint64_t static_value2 = 0xfb0aa113a097a2c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::messages_pkg::encoder_angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "messages_pkg/encoder_angles";
  }

  static const char* value(const ::messages_pkg::encoder_angles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::messages_pkg::encoder_angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 leg1_torso_angle\n"
"float32 leg2_torso_angle\n"
;
  }

  static const char* value(const ::messages_pkg::encoder_angles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::messages_pkg::encoder_angles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.leg1_torso_angle);
      stream.next(m.leg2_torso_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct encoder_angles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::messages_pkg::encoder_angles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::messages_pkg::encoder_angles_<ContainerAllocator>& v)
  {
    s << indent << "leg1_torso_angle: ";
    Printer<float>::stream(s, indent + "  ", v.leg1_torso_angle);
    s << indent << "leg2_torso_angle: ";
    Printer<float>::stream(s, indent + "  ", v.leg2_torso_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MESSAGES_PKG_MESSAGE_ENCODER_ANGLES_H
